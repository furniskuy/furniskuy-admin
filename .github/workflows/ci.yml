name: Deploy Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  ARTIFACT_NAME: app-build

jobs:
  build-artifact:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      servers: ${{ steps.export-deployment-matrix.outputs.servers }}
    steps:
      - uses: actions/checkout@v3

      - name: Compile CSS and Javascript
        run: |
          npm install
          npm run prod

      - name: Compile CSS and Javascript
        run: |
          npm ci
          npm run prod

      - name: Configure PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.1
          extensions: mbstring, ctype, fileinfo, openssl, PDO, bcmath, json, tokenizer, xml pgsql

      - name: Composer install
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules --exclude=tests *

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ github.sha }}.tar.gz

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          delimiter="$(openssl rand -hex 8)"
          JSON="$(cat ./.github/workflows/servers.json)"
          echo "servers<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$JSON" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

  deploy-matrix:
    name: "${{ matrix.server.name }}: Prepare release"
    runs-on: ubuntu-latest
    needs: build-artifact
    strategy:
      matrix:
        server: ${{ fromJson(needs.build-artifact.outputs.servers) }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            rm -rf ${{ matrix.server.path }}/releases/${GITHUB_SHA}/storage

            mkdir -p ${{ matrix.server.path }}/storage/{app,public,framework,logs}
            mkdir -p ${{ matrix.server.path }}/storage/framework/{cache,sessions,testing,views}
            chmod -R 0777 ${{ matrix.server.path }}/storage

  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs: [build-artifact, deploy-matrix]
    strategy:
      matrix:
        server: ${{ fromJson(needs.build-artifact.outputs.servers) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          STORAGE_PATH: ${{ matrix.server.path }}/storage
          BASE_PATH: ${{ matrix.server.path }}
          DOT_ENV: ${{ secrets.DOT_ENV }}
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,STORAGE_PATH,BASE_PATH,ENV_PATH,DOT_ENV
          script: |
            printf "%s" "$DOT_ENV" > "${BASE_PATH}/.env"
            ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
            ln -s -f $STORAGE_PATH $RELEASE_PATH
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            cd $ACTIVE_RELEASE_PATH
            php artisan key:generate
            php artisan optimize
            php artisan l5-swagger:generate
            service php8.1-fpm reload

  clean-up:
    name: "${{ matrix.server.name }}: Clean up"
    runs-on: ubuntu-latest
    needs: [build-artifact, deploy-matrix, activate-release]
    strategy:
      matrix:
        server: ${{ fromJson(needs.build-artifact.outputs.servers) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ matrix.server.path }}/releases
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
        with:
          host: ${{ matrix.server.host }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ matrix.server.port }}
          envs: RELEASES_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
